// Code generated by MockGen. DO NOT EDIT.
// Source: service.go
//
// Generated by this command:
//
//	mockgen -source=service.go -destination ./mock/internal_mock.go
//

// Package mock_internal is a generated GoMock package.
package mock_internal

import (
	context "context"
	http "net/http"
	reflect "reflect"

	gomock "go.uber.org/mock/gomock"
)

// MockSomeDependencyContract is a mock of SomeDependencyContract interface.
type MockSomeDependencyContract struct {
	ctrl     *gomock.Controller
	recorder *MockSomeDependencyContractMockRecorder
	isgomock struct{}
}

// MockSomeDependencyContractMockRecorder is the mock recorder for MockSomeDependencyContract.
type MockSomeDependencyContractMockRecorder struct {
	mock *MockSomeDependencyContract
}

// NewMockSomeDependencyContract creates a new mock instance.
func NewMockSomeDependencyContract(ctrl *gomock.Controller) *MockSomeDependencyContract {
	mock := &MockSomeDependencyContract{ctrl: ctrl}
	mock.recorder = &MockSomeDependencyContractMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSomeDependencyContract) EXPECT() *MockSomeDependencyContractMockRecorder {
	return m.recorder
}

// DoNetworkThing mocks base method.
func (m *MockSomeDependencyContract) DoNetworkThing(ctx context.Context, h *http.Client) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DoNetworkThing", ctx, h)
	ret0, _ := ret[0].(error)
	return ret0
}

// DoNetworkThing indicates an expected call of DoNetworkThing.
func (mr *MockSomeDependencyContractMockRecorder) DoNetworkThing(ctx, h any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DoNetworkThing", reflect.TypeOf((*MockSomeDependencyContract)(nil).DoNetworkThing), ctx, h)
}
